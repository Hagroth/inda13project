#BlueJ class context
comment0.params=name\ description
comment0.target=Room(java.lang.String,\ java.lang.String)
comment0.text=\r\n\ Create\ a\ room\ described\ "description".\ Initially,\ it\ has\r\n\ no\ exits.\ "description"\ is\ something\ like\ "a\ kitchen"\ or\r\n\ "an\ open\ court\ yard".\r\n\ @param\ description\ The\ room's\ description.\r\n
comment1.params=direction\ neighbor
comment1.target=void\ setExit(java.lang.String,\ Room)
comment1.text=\r\n\ Define\ an\ exit\ from\ this\ room.\r\n\ @param\ direction\ The\ direction\ of\ the\ exit.\r\n\ @param\ neighbor\ \ The\ room\ to\ which\ the\ exit\ leads.\r\n
comment10.params=item
comment10.target=void\ addItem(Item)
comment11.params=name
comment11.target=void\ removeItem(java.lang.String)
comment2.params=
comment2.target=java.lang.String\ getShortDescription()
comment2.text=\r\n\ @return\ The\ short\ description\ of\ the\ room\r\n\ (the\ one\ that\ was\ defined\ in\ the\ constructor).\r\n
comment3.params=
comment3.target=java.lang.String\ getLongDescription()
comment3.text=\r\n\ Return\ a\ description\ of\ the\ room\ in\ the\ form\:\r\n\ \ \ \ \ You\ are\ in\ the\ kitchen.\r\n\ \ \ \ \ Exits\:\ north\ west\r\n\ @return\ A\ long\ description\ of\ this\ room\r\n
comment4.params=
comment4.target=java.lang.String\ getExitString()
comment4.text=\r\n\ Return\ a\ string\ describing\ the\ room's\ exits.\ If\ the\ exits\ \r\n\ have\ been\ discovered,\ this\ method\ prints\ its\ name.\r\n\ For\ example\:\r\n\ "Exits\:\ north\ (beach)\ west\ (unknown)".\r\n\ @return\ Details\ of\ the\ room's\ exits.\r\n
comment5.params=direction
comment5.target=Room\ getExit(java.lang.String)
comment5.text=\r\n\ Return\ the\ room\ that\ is\ reached\ if\ we\ go\ from\ this\ room\ in\ direction\r\n\ "direction".\ If\ there\ is\ no\ room\ in\ that\ direction,\ return\ null.\r\n\ @param\ direction\ The\ exit's\ direction.\r\n\ @return\ The\ room\ in\ the\ given\ direction.\r\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\r\n\ Overrides\ the\ standard\ toString\ method.\ Returns\ the\ room\ name.\r\n\ @return\ The\ room\ name.\r\n
comment7.params=
comment7.target=void\ discover()
comment7.text=\r\n\ Makes\ the\ room\ discovered.\r\n
comment8.params=
comment8.target=boolean\ isDiscovered()
comment8.text=\r\n\ Answers\ whether\ the\ room\ has\ been\ discovered\ or\ not.\r\n\ @return\ True\ if\ already\ discovered,\ otherwise\ false.\r\n
comment9.params=room
comment9.target=void\ lockExit(Room)
comment9.text=\r\n\ Locks\ the\ exit\ to\ the\ chosen\ room.\ Throws\ an\ IllegalArgumentException\ if\r\n\ rooms\ are\ not\ connected.\r\n\ @params\ A\ connected\ room\ to\ lock.\r\n
numComments=12
